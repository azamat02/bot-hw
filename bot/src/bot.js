import { config } from 'dotenv';
import { Telegraf, Markup, Scenes, session } from 'telegraf';
import cron from 'node-cron';
import fs, {chmod} from 'fs';
import { registerUser, saveHomeworkSubmission, getUsersWhoDidNotSubmitHomework, getHomeworkSubmissions } from './database.js';
import { createReadStream, writeFileSync } from 'fs';
import excelJs from 'exceljs';
import {channelPost} from "telegraf/filters"; // Make sure to install exceljs package

const { Workbook } = excelJs

// Define the admin username(s)
// const ADMINS = ['dsgnmaster31']; // Replace with actual admin username
// const ADMINS = ['Daniya_yess', 'dsgnmaster31']; // Replace with actual admin username
const ADMINS = ['dsgnmaster31']; // Replace with actual admin username

// Sticker URLs
const STICKER_URLS = {
    greeting: 'https://data.chpic.su/stickers/t/tonevskayaaa/tonevskayaaa_002.webp',
    homeworkReceived: 'https://data.chpic.su/stickers/t/tonevskayaaa/tonevskayaaa_003.webp',
    adminGreeting: 'https://data.chpic.su/stickers/t/tonevskayaaa/tonevskayaaa_013.webp',
    dontSendHW: 'https://data.chpic.su/stickers/t/tonevskayaaa/tonevskayaaa_012.webp',
};

config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// Define your scenes
const greeterScene = new Scenes.BaseScene('greeter');
greeterScene.enter(async (ctx) => {
    const chatId = ctx.chat.id;
    const nickname = ctx.from.username;
    // const videoStream = fs.createReadStream('/app/hello.mp4');
    // await ctx.replyWithVideo({ source: videoStream });
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∞—è! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º.\n' +
        '\n' +
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —ç—Ç–∏–º –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –ø–æ–¥–µ–ª–∏—Ç—å –∏—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–∞–∫ —ç—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ 5-–º —É—Ä–æ–∫–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –∫—É—Ä—Å–∞ –õ–µ–≥–∫–æ—Å—Ç—å. –ü—Ä–æ–ø–∏—à–∏ —Ü–µ–ª–∏ –ø–æ —ç—Ç–æ–π –º–µ—Ç–æ–¥–∏–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ —ç—Ç–æ—Ç –±–æ—Ç. \n' +
        '\n' +
        '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –í —ç—Ç–æ—Ç —á–∞—Ç —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –°–ï–ì–û–î–ù–Ø —Ç—ã —Å–¥–µ–ª–∞–ª–∞ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º. \n' +
        '\n' +
        '–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´—Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –≤ —ç—Ç–æ—Ç –±–æ—Ç. \n' +
        '\n' +
        '–ï—Å–ª–∏ —Ç—ã –∑–∞–±—É–¥–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏, —ç—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å. \n' +
        '\n' +
        '–ù–∞—á–Ω–µ–º? üî•');
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.');
    ctx.session.state = 'awaiting_full_name';
});

greeterScene.on('text', async (ctx) => {
    if (ctx.session.state === 'awaiting_full_name') {
        ctx.session.fullName = ctx.message.text;
        await ctx.replyWithSticker(STICKER_URLS.greeting);
        await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π üòç');
        ctx.session.state = 'awaiting_goals'; // Update state to await goals
    } else if (ctx.session.state === 'awaiting_goals') {
        const goals = ctx.message.text;
        await registerUser(ctx.chat.id, ctx.from.username, ctx.session.fullName, goals);
        // Here you might want to store the goals similarly to how you handle the full name.
        await ctx.reply('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å, –Ω–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—Å—è –∫ –∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é?', Markup.inlineKeyboard([
            Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è', 'send_homework')
        ]));
        await ctx.reply('–ï—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å —Ç—ã –∑–∞–±—É–¥–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, —Ç–æ —ç—Ç–æ—Ç –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç ‚ò∫Ô∏è');
        return ctx.scene.leave(); // User has provided all necessary information, leave the scene
    }
});

const homeworkScene = new Scenes.BaseScene('homework');
homeworkScene.enter((ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ.'));
homeworkScene.on('text', async (ctx) => {
    const chatId = ctx.chat.id;
    const homeworkText = ctx.message.text;
    await saveHomeworkSubmission(chatId, homeworkText);
    // Send homework received sticker
    await ctx.replyWithSticker(STICKER_URLS.homeworkReceived);
    await ctx.reply('–í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –°–ø–∞—Å–∏–±–æ!');
    return ctx.scene.leave();
});

// Create stage
const stage = new Scenes.Stage([greeterScene, homeworkScene]);
bot.use(session());
bot.use(stage.middleware());

bot.start(async (ctx) => {
    if (ADMINS.includes(ctx.from.username)) {
        // If the user is an admin, send the admin greeting sticker
        await ctx.replyWithSticker(STICKER_URLS.adminGreeting);
        // Add a button for admin to get homework submissions
        await ctx.reply(`–î–æ–±—Ä—ã–π –¥–µ–Ω—å ${ctx.from.username}! –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞`)
        await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.', Markup.inlineKeyboard([
            Markup.button.callback('–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π', 'get_homeworks')
        ]));
    } else {
        await ctx.scene.enter('greeter')
    }
});

bot.action('send_homework', (ctx) => {
    ctx.answerCbQuery();
    ctx.scene.enter('homework');
});

bot.action('get_homeworks', async (ctx) => {
    if (!ADMINS.includes(ctx.from.username)) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
        return;
    }

    // Query the database to get homework submissions
    const homeworkSubmissions = await getHomeworkSubmissions(); // Implement this function in your database logic

    // Create an Excel workbook
    const workbook = new Workbook();
    const worksheet = workbook.addWorksheet('–î–ó –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');

    // Add a header row
    worksheet.addRow(['–§–ò–û', '–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º', '–¢–µ–∫—Å—Ç –î–ó', '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', '–¶–µ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞']);

    // Add data rows
    homeworkSubmissions.forEach(submission => {
        worksheet.addRow([submission.full_name, submission.nickname, submission.text, submission.submission_date, submission.goals]);
    });

    // Write to a temporary file
    const filePath = `/app/–î–ó_–≤—Å–µ—Ö_—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.xlsx`;
    await workbook.xlsx.writeFile(filePath);

    // Send the Excel file to the admin
    await ctx.replyWithDocument({ source: filePath });
});

console.log(new Date())

cron.schedule('00 21 * * *', async () => {
    try {
        const rows = await getUsersWhoDidNotSubmitHomework();
        for (const row of rows) {
            await bot.telegram.sendSticker(row.chat_id, STICKER_URLS.dontSendHW);
            await bot.telegram.sendMessage(row.chat_id, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å.', Markup.inlineKeyboard([
                Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', 'send_homework')
            ]));
        }
    } catch (error) {
        console.error('Error executing cron job', error);
    }
});

bot.launch()